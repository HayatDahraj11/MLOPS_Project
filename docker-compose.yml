version: '3'

services:
  postgres:
    image: postgres:13
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5

  airflow-init:
    build:
      context: ./airflow
      dockerfile: Dockerfile
    depends_on:
      - postgres
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__USERS__USERNAME=airflow
      - AIRFLOW__USERS__PASSWORD=airflow123
      - AIRFLOW__USERS__FIRSTNAME=Airflow
      - AIRFLOW__USERS__LASTNAME=Admin
      - AIRFLOW__USERS__EMAIL=admin@airflow.com
      - AIRFLOW__USERS__ROLE=Admin
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
    command: db init
    restart: on-failure

  airflow-webserver:
    build:
      context: ./airflow
      dockerfile: Dockerfile
    depends_on:
      - postgres
      - airflow-init
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__WEBSERVER__AUTHENTICATE=True
      - AIRFLOW__WEBSERVER__AUTH_BACKEND=airflow.api.auth.backend.basic_auth
      - AIRFLOW__USERS__USERNAME=airflow
      - AIRFLOW__USERS__PASSWORD=airflow123
      - AIRFLOW__USERS__FIRSTNAME=Airflow
      - AIRFLOW__USERS__LASTNAME=Admin
      - AIRFLOW__USERS__EMAIL=admin@airflow.com
      - AIRFLOW__USERS__ROLE=Admin
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./src:/opt/airflow/src
      - ./kaggle:/home/airflow/.kaggle
      - ./data:/opt/airflow/data
      # FIX 1: Add MLflow volume to Airflow containers for model registration
      - ./mlflow:/opt/airflow/mlflow
    ports:
      - "8080:8080"
    command: webserver
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "--quiet", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5

  airflow-scheduler:
    build:
      context: ./airflow
      dockerfile: Dockerfile
    depends_on:
      - postgres
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./src:/opt/airflow/src
      - ./kaggle:/home/airflow/.kaggle
      - ./data:/opt/airflow/data
      # FIX 2: Add MLflow volume to scheduler for model registration
      - ./mlflow:/opt/airflow/mlflow
    command: scheduler

  mlflow:
    image: ghcr.io/mlflow/mlflow:v2.7.1
    # FIX 3: Run as current user to fix permissions
    user: "${UID:-1000}:${GID:-1000}"
    ports:
      - "5001:5001"
    volumes:
      - ./mlflow:/mlflow
    environment:
      - MLFLOW_BACKEND_STORE_URI=sqlite:////mlflow/mlflow.db
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=/mlflow/artifacts
    # FIX 4: Add --serve-artifacts flag for full model serving capability
    command: mlflow server --host 0.0.0.0 --port 5001 --backend-store-uri sqlite:////mlflow/mlflow.db --default-artifact-root /mlflow/artifacts --workers 1 --serve-artifacts
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  fastapi:
    build:
      context: .
      dockerfile: src/api/Dockerfile
    ports:
      - "8000:8000"
    depends_on:
      - mlflow
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5001
    volumes:
      - ./src:/app/src
    # FIX 5: Add health check for FastAPI
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  prometheus:
    image: prom/prometheus:v2.47.0
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

  grafana:
    image: grafana/grafana:10.1.2
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/grafana:/var/lib/grafana
    depends_on:
      - prometheus
    # FIX 6: Fix Grafana permissions
    user: "${UID:-1000}:${GID:-1000}"

volumes:
  postgres_data: